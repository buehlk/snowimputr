% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_deleted_msg.R
\name{find_deleted_msg}
\alias{find_deleted_msg}
\title{Find Deleted Messages}
\usage{
find_deleted_msg(
  corpus_df,
  deleted_msg_ids,
  deleted_channel_ids,
  fwd_from_colname,
  fwd_msg_colname,
  return_result = "all",
  date_colname = NA,
  impute = FALSE,
  message_ID_colname = NA,
  channel_ID_colname = NA
)
}
\arguments{
\item{corpus_df}{A data frame containing the corpus of messages.}

\item{deleted_msg_ids}{A vector of deleted message IDs.}

\item{deleted_channel_ids}{A vector of deleted channel IDs.}

\item{fwd_from_colname}{The column name stating which channel a message was forwarded from in `corpus_df`.}

\item{fwd_msg_colname}{The column name stating the original message IDs of the forwareded message in `corpus_df`.}

\item{return_result}{The type of result to return (all, latest, oldest).}

\item{date_colname}{The column name of the date variable in `corpus_df`.}

\item{impute}{Logical value indicating whether to impute messages.}

\item{message_ID_colname}{The column name of the message ID (optional, required for impute).}

\item{channel_ID_colname}{The column name of the channel ID (optional, required for impute).}
}
\value{
A data frame with the found deleted messages based on the specified criteria.
}
\description{
A function to find deleted messages based on the provided criteria.
}
\examples{
\dontrun{
telegram_data <- data.frame(
Channel_ID = rep(c("111111", "222222", "333333"), each = 6),
Message_ID = c(c(1:4, 6, 7), c(2:7), c(1, 5, 9, 15, 16, 19)),
Date = as.Date(c("2023-06-26", "2023-06-27", "2023-06-28", "2023-06-29", "2023-06-30", "2023-07-01",
                 "2023-06-27", "2023-06-28", "2023-06-29", "2023-06-29", "2023-06-30", "2023-07-01",
                 "2023-06-06", "2023-06-07", "2023-06-20", "2023-06-21", "2023-06-30", "2023-07-01"), format = "\%Y-\%m-\%d"),
Forwarded_from_channel_ID = c(c("333333", "333333", "222222", rep(NA, 3)),
                              c(rep(NA, 4), "111111", "333333"), rep(NA, 6)),
Forwarded_from_message_ID = c(2, 3, 1, rep(NA, 7), 5, 2, rep(NA, 6)),
Message_content = c(
  c(rep("The original message is deleted, but available via bootstrap snowball imputation.", 3), rep("This is an organic message.", 3)),
  c(rep("This is an organic message.", 4), rep("The original message is deleted, but available via bootstrap snowball imputation.", 2)),
  rep("This is an organic message.", 6)
)
)

# Show all deleted messages in dataset:
deleted <- list_deleted_msg(msg_df = telegram_data,
channel_ID_colname = "Channel_ID",
message_ID_colname = "Message_ID")

# Show the deleted messages of Channel "333333"
deleted <- list_deleted_msg(msg_df = telegram_data,
channel_ID_colname = "Channel_ID",
message_ID_colname = "Message_ID",
target_entity = "333333")


Find the messages in the dataset that were deleted in "333333" but forwarded in other channels
find_deleted_msg(
corpus_df = telegram_data,
deleted_msg_ids = deleted$Message_ID,
deleted_channel_ids = deleted$Channel_ID,
fwd_from_colname = "Forwarded_from_channel_ID",
fwd_msg_colname = "Forwarded_from_message_ID"
)

# In case the same message is found several times show only the oldest
find_deleted_msg(
corpus_df = telegram_data,
deleted_msg_ids = deleted$Message_ID,
deleted_channel_ids = deleted$Channel_ID,
fwd_from_colname = "Forwarded_from_channel_ID",
fwd_msg_colname = "Forwarded_from_message_ID",
date_colname = "Date", return_result = "oldest"
)

# Show only the oldest and conveniently impute the original channel ID and message ID
find_deleted_msg(
corpus_df = telegram_data,
deleted_msg_ids = deleted$Message_ID,
deleted_channel_ids = deleted$Channel_ID,
fwd_from_colname = "Forwarded_from_channel_ID",
fwd_msg_colname = "Forwarded_from_message_ID",
date_colname = "Date", return_result = "oldest",
message_ID_colname = "Message_ID",
channel_ID_colname = "Channel_ID",
impute = TRUE
)
}

}
